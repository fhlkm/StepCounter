package com.example.sensorfunctiontest.test;

import java.util.Arrays;
import java.util.List;

import junit.framework.Assert;

import android.test.AndroidTestCase;
import android.util.Log;

import com.example.constant.HDClass;
import com.example.sensorfunctiontest.math.MathCal;
import com.example.tool.Filter;
import com.example.tool.TrackingOrientation;

public class TestFilter extends AndroidTestCase{
	private float[][] samples = {{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,0},{0,0,1},{0,0,2},{0,0,1},{0,0,0},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,0},{0,0,1},{0,0,2},{0,0,1},{0,0,0},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,0},{0,0,1},{0,0,2},{0,0,1},{0,0,0},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,0},{0,0,1},{0,0,2},{0,0,1}};
	private float[][] samplesCycle = {
			{0,0.75f,0},{0,0.35f,1},{0,-0.05f,2},{0,-0.4f,1},{0,-0.7f,0},{0,-0.3f,-1},{0,0.1f,-2},{0,0.4f,-1},{0,0.7f,0}
	};
	private float[][] sampleCyclesforStride ={
			{0,0.75f,1},{0,0.35f,2},{0,-0.05f,1},{0,-0.4f,-1},{0,-0.7f,-2},{0,-0.3f,-1}
			
	};
	private float[][] samples2 = {{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,1},{0,0,2},{0,0,1},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,1},{0,0,2},{0,0,1},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,1},{0,0,2},{0,0,1},{0,0,-1},{0,0,-2},{0,0,-1},
			{0,0,1},{0,0,2},{0,0,1}};
	
	private double[] sampleSleep ={0.13945103,-1.8596253,-2.2872734,-2.3694096,-2.3858366,-2.3793612,-2.3372679,-2.304306,-2.376192,-2.3905692,-2.3709412,-2.4043999,-2.4261231,-2.388125,-2.380525,-2.3621025,-2.3610983,-2.3508425,-2.3492393,-2.3489184,-2.3215117,-2.3886452,-2.340592,-2.3849492,-2.3938208,-2.4235687,-2.3713822,-2.354076,-2.3688726,-2.371832,-2.381701,-2.364771,-2.3414583,-2.3334055,-2.3317947,-2.3591866,-2.3285131,-2.3063898,-2.2833648,-2.27876,-2.310841,-2.3818655,-2.3751822,-2.3570614,-2.353437,-2.3631768,-2.3331141,-2.3136463,-2.34332,-2.3492546,-2.306301,-2.3447256,-2.38873,-2.3603349,-2.3546557,-2.2924242,-2.357439,-2.3413844,-2.328638,-2.326089,-2.3090215,-2.374147,-2.3936706,-2.3778462,-2.3746815,-2.3653307,-2.3609734,-2.3611784,-2.3280406,-2.321413,-2.3540878,-2.3249683,-2.3687863,-2.4073515,-2.4150643,-2.367916,-2.3567982,-2.347168,-2.305966,-2.2977252,-2.3684993,-2.3897686,-2.3947954,-2.340838,-2.3300467,-2.3589158,-2.3184319,-2.3221588,-2.3904018,-2.4040504,-2.3766456,-2.41427,-2.368998,-2.364532,-2.3636389,-2.3623776,-2.3280668,-2.334701,-2.3468022,-2.3492222,-2.337274,-2.3962517,-2.3181043,-2.3474073,-2.3532681,-2.3506503,-2.3172936,-2.3389854,-2.3635383,-2.3684487,-2.3529258,-2.366385,-2.4259067,-2.3979197,-2.392322,-2.3514585,-2.3200169,-2.3671021,-2.394414,-2.399876,-2.3813515,-2.3910565,-2.3989668,-2.3744931,-2.3695984,-2.3522534,-2.3053794,-2.3450928,-2.3531756,-2.354792,-2.3585253,-2.3976254,-2.3704014,-2.3701544,-2.3701053,-2.3727245,-2.3316736,-2.361473,-2.3515234,-2.349533,-2.4060788,-2.3847008};
	private double[] sampleMove ={-1.5246401,-3.6116118,-4.0733466,-4.1656933,-3.9289427,-3.7831597,-3.632999,-3.5437245,-3.5258698,-3.520584,-3.650999,-3.716251,-3.8077774,-3.8260822,-3.8827453,-3.9691787,-4.0213895,-3.9923553,-3.9865484,-3.9901762,-3.8998742,-3.782404,-3.6058912,-3.5705886,-3.2560058,-2.7403388,-2.2310452,-1.6195555,-1.4972572,-1.0050621,-0.53971577,-0.24993324,-0.07753086,-0.043049812,-0.08170891,-0.21889591,-0.8439903,-1.4629383,-1.5867271,-2.0629044,-2.4290953,-2.6927795,-2.8013525,-2.8230667,-2.5852818,-2.1421747,-1.6636658,-1.017437,-0.8881912,-0.2757883,0.31690884,0.8368912,1.3187227,1.4150887,1.557148,1.6740589,1.6787643,1.5405712,1.5129328,1.2523508,0.91027164,0.55656147,0.3440485,0.3015461,0.022715569,-0.22257996,-0.39150047,-0.5665245,-0.6015291,-0.67946815,-0.94593525,-1.1413679,-1.2503653,-1.2721653,-1.2601709,-1.2896624,-1.455801,-1.6691008,-1.7117605,-1.8641415,-2.1018143,-2.3596134,-2.5167985,-2.5482354,-2.5733895,-2.495566,-2.4717278,-2.462665,-2.4608526,-2.5284915,-2.6813455,-2.7368984,-2.8673406,-2.8934293,-2.9288821,-2.9000173,-2.8706555,-2.8363247,-2.8294587,-2.8387065,-2.8963552,-2.9180012,-2.9706435,-2.981172,-3.0646658,-3.1235743,-3.209426,-3.1934018,-3.190197,-3.1815872,-3.4318132,-3.769557,-4.726538,-4.9179344,-5.2889223,-5.7043138,-6.015126,-6.2426667,-6.2881746,-6.369028,-6.4288087,-6.358028,-6.198876,-6.1670456,-6.073056,-5.9419,-5.811233,0.31690884,0.8368912,1.3187227,1.4150887,1.557148,1.6740589,1.6787643,1.5405712,1.5129328,1.2523508,0.91027164,0.55656147,0.3440485,0.3015461,0.022715569,-0.22257996,-0.39150047,-0.5665245,-0.6015291,-0.67946815,-0.94593525,-1.1413679,-1.2503653,-1.2721653,-1.2601709,-1.2896624,-1.455801,-1.6691008,-1.7117605,-1.8641415,-2.1018143,-2.3596134,-2.5167985,-2.5482354,-2.5733895,-2.495566,-2.4717278,-2.462665,-2.4608526,-2.5284915,-2.6813455,-2.7368984,-2.8673406,-2.8934293,-2.9288821,-2.9000173,-2.8706555,-2.8363247,-2.8294587,-2.8387065,-2.8963552,-2.9180012,-2.9706435,-2.981172,-3.0646658,-3.1235743,-3.209426,-3.1934018,-3.190197,-3.1815872,-3.4318132,-3.769557,-4.726538,-4.9179344,-5.2889223,-5.7043138,-6.015126,-6.2426667,-6.2881746,-6.369028,-6.4288087,-6.358028,-6.198876,-6.1670456,-6.073056,-5.9419,-5.811233,-5.6475472,-5.61481,-5.411611,-5.1007442,-4.7647285,-4.6053596,-4.573486,-4.509494,-4.359956,-4.2476716,-4.093252,-4.062368,-4.0060825,-3.9666805,-3.9588609,-4.053753,-4.0727315,-4.001777,-3.7362475,-3.3723044,-3.0529795,-2.9891143,-2.6140065,-2.1790419,-1.4565153,-1.2213602,-1.1743298,-1.0968485,-1.1466398,-1.2485056,-1.3640203,-1.3871231,-1.4435883,-1.4995785,-1.4854965,-1.3664951,-1.3426952,-1.0244312,-0.59923077,-0.1048193,0.37835884,0.47499466,0.8238239,1.1786203,1.3646374,1.3021698,1.2896767,1.0601206,0.8992796,0.60564995,0.29530144,0.23323154,0.14489555,0.19709587,0.32815075,0.4462862,0.46991348,0.6666069,0.76876545,0.8863678,1.1430426,1.194377,1.2624531,1.4616594,1.2837257,0.9405327,0.8718939,0.47690582,-0.06851578,-0.6636419,-1.1897497,-1.2949715,-1.8518038,-2.578322,-3.2696447,-3.7844315,-3.8873892,-4.3142953,-4.608554,-4.784687,-4.7953234,-4.7974505,-4.760166,-4.5882297,-4.476386,-4.2891083,-4.2516527,-4.1465573,-4.012482,-3.8674254,-3.6072016,-3.5551567,-3.2287655,-2.8579078,-2.545517,-2.3070207,-2.2593217,-2.2236967,-2.2615695,-2.4985037,-2.728035,-2.7739415,-3.213406,-3.6001277,-4.1124988,-4.650018,-4.757522,-5.1597023,-5.677075,-6.0909514,-6.3993855,-6.4610724,-6.513675,-6.3490605,-6.071718,-5.91783,-5.8870525,-5.6755857,-5.350217,-5.124833,-4.909793,-4.8667846,-4.6008987,-4.2860885,-4.0327606,-3.8550472,-3.8195047,-3.8210773,-3.7152376,-3.6879501,-3.7024431,-3.7053418,-3.616139,-3.5792637,-3.632545,-3.5184646,-3.4956484,-3.33459,-2.988576,-2.5613165,-1.9996557,-1.8873234,-1.5760269,-1.3110085,-1.2275639,-1.258132,-1.264245,-1.4328756,-1.6326246,-1.8559532,-2.0417838,-2.07895,-2.21211,-2.4845605,-2.605855,-2.6164956,-2.6186237,-2.426556,-2.2309728,-2.1311884,-1.9654651,-1.9323206,-1.8202515,-1.6217899,-1.5102129,-1.3421812,-1.3085747,-1.1903591,-1.284771,-1.2577,-1.1625509,-1.1435213,-0.7565775,-0.3487482,-0.1406908,-0.1165514,-0.1117239,-0.15464115,-0.3209467,-0.60484886,-0.78493595,-0.82095337,-0.9001255,-0.9688511,-0.7698345,-0.48586845,-0.42907524,-0.020551682,0.41099358,0.87031555,1.2363148,1.309515,1.6209126,1.8816891,2.139431,2.123147,2.1198902,1.9637966,1.5822754,1.0038004,0.33770943,0.20449162,-0.28265,-0.89029694,-1.5274267,-2.142406,-2.2654018,-2.7112489,-3.1138225,-3.4884777,-3.7106514,-3.7550864,-3.7468581,-3.6811128,-3.4724827,-3.1374598,-3.070455,-2.7651854,-2.3550677,-2.1924462,-2.2022634,-2.2042265,-2.2511616,-2.2690601,-2.452433,-2.512704,-2.5247579,-2.5297832,-2.6632662,-2.8089056,-3.0786333,-3.1325788,-3.5114398,-3.905304,-4.287864,-4.6793833,-4.7576876,-4.934253,-5.0631824,-5.1677027,-5.2198725,-5.2303066,-5.2047596,-5.044049,-5.0012703,-5.0092125,-5.010801,-5.250389,-5.6828833,0.41099358,0.87031555,1.2363148,1.309515,1.6209126,1.8816891,2.139431,2.123147,2.1198902,1.9637966,1.5822754,1.0038004,0.33770943,0.20449162,-0.28265,-0.89029694,-1.5274267,-2.142406,-2.2654018,-2.7112489,-3.1138225,-3.4884777,-3.7106514,-3.7550864,-3.7468581,-3.6811128,-3.4724827,-3.1374598,-3.070455,-2.7651854,-2.3550677,-2.1924462,-2.2022634,-2.2042265,-2.2511616,-2.2690601,-2.452433,-2.512704,-2.5247579,-2.5297832,-2.6632662,-2.8089056,-3.0786333,-3.1325788,-3.5114398,-3.905304,-4.287864,-4.6793833,-4.7576876,-4.934253,-5.0631824,-5.1677027,-5.2198725,-5.2303066,-5.2047596,-5.044049,-5.0012703,-5.0092125,-5.010801,-5.250389,-5.6828833,-6.03415,-6.44749,-6.530158,-6.8548365,-7.0730486,-7.0897837,-6.895808,-6.8570127,-6.4122467,-6.0522013,-5.5837216,-5.0730476,-4.970913,-4.715577,-4.3351064,-4.075954,-3.7690945,-3.7077227,-3.5437899,-3.4658756,-3.5158424,-3.6116834,-3.6308517,-3.7827206,-3.9748092,-4.009909,-3.9295292,-3.913453,-3.764758,-3.3857775,-2.787333,-2.0407467,-1.8914294,-1.3324709,-0.84134007,-0.43160725,0.09517765,0.20053482,0.88345814,1.7102251,2.1888208,2.3598013,2.3939972,2.2935276,2.1560307,1.8876772,1.3962059,1.2979116,1.0181732,0.693635,0.4533348,0.07884884,0.0039520264,-0.23969936,-0.5220423,-0.695796,-0.74155426,-0.7507057,-0.6061373,-0.32436562,0.022883415,0.5611248,0.6687727,1.2234278,1.6215906,1.8702888,1.8644924,1.8633327,1.570365,1.0321808,0.14190197,-0.9334898,-1.1485682,-1.9331236,-2.6556673,-3.2237873,-3.6031518,-3.6790247,-3.899026,-4.0029707,-4.072359,-3.978572,-3.9598145,-3.8615036,-3.647975,-3.1087332,-2.7832308,-2.71813,-2.6090126,-2.488296,-2.2982087,-2.1863837,-2.1640186,-1.9758096,-2.0650172,-2.1491618,-2.1756868,-2.1809916,-2.4245534,-2.7567205,-3.2105265,-3.7650037,-3.8758993,-4.3253865,-4.7802076,-5.253001,-5.6770473,-5.7618566,-6.0970526,-6.3485584,-6.556981,-6.656184,-6.676025,-6.755367,-6.6831207,-6.466064,-6.2583175,-6.2167683,-5.878607,-5.5858912,-5.365263,-5.0274434,-4.95988,-4.726765,-4.2043424,-3.8361244,-3.5415883,-3.4826813,-3.3355608,-3.2858076,-3.3923292,-3.4809422,-3.4986649,-3.621519,-3.658914,-3.8123102,-3.8665094,-3.877349,-3.842955,-3.6842384,-3.5232077,-3.398172,-3.3731651,-3.3101363,-3.1273394,-2.998333,-2.8286948,-2.7947674,-2.561953,-2.3554454,-2.231772,-2.0934567,-2.0657935,-1.9889703,-1.838244,-1.9889388,-2.1869187,-2.2265148,-2.3857775,-2.2789955,-2.0555496,-1.8563776,-1.8165431,-1.4603662,-1.2071133,-1.0550213,-1.0054722,-0.99556255,-0.9381113,-0.7805424,-0.6167002,-0.38586712,-0.3397007,-0.2671814,-0.31401062,-0.44421768,-0.5617027,-0.5852003,-0.6870508,-0.6054554,-0.5579586,-0.6445894,-0.6619158,-0.76919174,-0.7476721,-0.6456518,-0.36549377,-0.30946255,-0.2890644,-0.11752987,0.058193207,0.29581833,0.34334373,0.52148914,0.82948303,1.1292,1.372117,1.420701,1.5108995,1.5399561,1.2753744,0.48885632,0.33155346,-0.11694527,-0.49734688,-0.9072466,-1.3872128,-1.4832067,-2.0046577,-2.4841619,-2.8908901,-3.1433897,-3.1938896,-3.3065662,-3.2947211,-3.1160378,-2.762803,-2.6921558,-2.3643794,-1.9869475,-1.7576714,-1.861548,-1.8823233,-2.2321944,-2.7373657,-3.2703242,-3.7854862,-3.8885188,-4.3087196,-4.692822,-5.0633044,-5.491828,-5.577533,-5.9689546,-6.461458,-7.0378566,-7.38625,-7.455929,-7.634753,-7.693489,-7.628264,-7.2806816,-7.2111654,-6.950451,-6.6365137,-6.1171436,-5.470859,-5.3416023};
	private float [][] sample3 ={{0,0,1},{0,0,2},{0,0,2},{0,0,3}};
	// 1.5 1.3 0.8 0  |||| 0 1 2 2.2 3 2.2 2 1 
	private float [][] cycleAnalysample ={{1.1f,1.3f,1},{1.3f,1.5f,2f},{1.1f,1.3f,2.2f},{0.6f,0.8f,3},{0,0,2.2f},{-0.6f,-0.8f,2},{-1.1f,-1.3f,1},
	{-1.3f,-1.5f,-1},{-1.1f,-1.3f,-2},{-0.6f,-0.8f,-2.2f},{0,0,-3},{0.6f,0.8f,-2.2f},{1.1f,1.3f,-2},{1.3f,1.5f,-1}};
	

	private float [][] Sumsamples = {{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},
			{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},
			{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},
			{50,50,50},
			{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},
			{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},
			{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}};
	
	private static float[][] smoothSamples ={{0,0,0},{0,0,1},{0,0,0},{0,0,-1},
									{0,0,0},{0,0,1},{0,0,0},{0,0,-1},
									{0,0,0},{0,0,1},{0,0,0},{0,0,-1},{0,0,0}};
	
	private float[][]testOrientation={{-0.5f,-1,0,},{0,0,2},{0.5f,1,0},{0,0,-2},{-0.5f,-1,0}};
	private float[][]testOrientation2={{0,0,0,},{0.5f,0.25f,2},{0,0,0},{-0.5f,-0.25f,-2},{0,0,0}};
	private float[] hd={1,2,3,4};
	private float[][] data={{1f,1f,1},{2,2,2},{3,3,3},{4,4,4},{5,5,5}};
	private double[]data3={2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,2.5226393,0.9777565,0.9777565,1.9915342,1.9915342,2.6717854,2.6717854,2.6403885,2.6403885,1.4605417,1.4605417,2.2337341,2.2337341,3.5724716,3.5724716,4.413538,4.413538,2.9953957,2.9953957,0.43321228,0.43321228,0.98387337,0.98387337,2.4647102,2.4647102,2.1895075,2.1895075,1.4693251,1.4693251,0.5838146,0.5838146,-0.72656155,-0.72656155,-2.079968,-2.079968,-3.1682405,-3.1682405,-3.2706876,-3.2706876,-3.2015147,-3.2015147,-2.9862485,-2.9862485,-2.887096,-2.887096,-2.5607052,-2.5607052,-2.1600142,-2.1600142,-1.1190605,-1.1190605,-0.48640442,-0.48640442,-0.5016918,-0.5016918,-0.6504679,-0.6504679,-0.71454334,-0.71454334,0.039206505,0.039206505,1.1354551,1.1354551,2.2661505,2.2661505,2.958232,2.958232,2.2080183,2.2080183,1.7361507,1.7361507,2.3088036,2.3088036,3.9234133,3.9234133,3.1438723,3.1438723,0.49333477,0.49333477,-0.2622671,-0.2622671,-0.8740177,-0.8740177,-1.2439718,-1.2439718,-2.0277247,-2.0277247,-3.1958108,-3.1958108,-3.675805,-3.675805,-3.893384,-3.893384,-3.7432609,-3.7432609,-2.6263695,-2.6263695,-1.0779314,-1.0779314,-0.43021965,-0.43021965,-0.7422943,-0.7422943,-0.5966959,-0.5966959,-0.07064438,-0.07064438,1.419694,1.419694,2.0177927,2.0177927,1.3848028,1.3848028,1.3263464,1.3263464,1.4439135,1.4439135,1.9685268,1.9685268,1.5490637,1.5490637,3.3645878,3.3645878,6.108782,6.108782,4.0172834,4.0172834,-0.022125244,-0.022125244,-1.503355,-1.503355,-0.53129196,-0.53129196,-0.15724182,-0.15724182,-0.2637701,-0.2637701,-0.55392265,-0.55392265,-1.3818979,-1.3818979,-2.6809554,-2.6809554,-3.5122209,-3.5122209,-3.0702033,-3.0702033,-3.224751,-3.224751,-1.9764109,-1.9764109,-0.96111774,-0.96111774,-0.42493534,-0.42493534,-0.086862564,-0.086862564,0.30446148,0.30446148,0.18462849,0.18462849,0.19662571,0.19662571,0.63490677,0.63490677,0.93467426,0.93467426,2.5026712,2.5026712,2.5794106,2.5794106,2.633584,2.633584,3.059286,3.059286,4.4415636,4.4415636,3.3348074,3.3348074,2.4864979,2.4864979,0.5123005,0.5123005,-1.1725473,-1.1725473,-2.0433807,-2.0433807,-2.282116,-2.282116,-2.9702334,-2.9702334,-4.0649314,-4.0649314,-4.65313,-4.65313,-4.8267317,-4.8267317,-4.1586866,-4.1586866,-2.8452816,-2.8452816,-1.4748573,-1.4748573,-0.33327866,-0.33327866,0.57544136,0.57544136,0.6234169,0.6234169,0.85519314,0.85519314,1.2069616,1.2069616,1.4984941,1.4984941,1.9315395,1.9315395,2.483652,2.483652,2.4458199,2.4458199,2.5433207,2.5433207,4.7342863,4.7342863,4.7832985,4.7832985,0.9153471,0.9153471,-1.5025625,-1.5025625,-0.20601177,-0.20601177,1.2115078,1.2115078,1.4867058,1.4867058,0.53397846,0.53397846,-1.0959568,-1.0959568,-2.7288976,-2.7288976,-3.4157238,-3.4157238,-3.3785152,-3.3785152,-3.2463646,-3.2463646,-2.9421787,-2.9421787,-2.6384244,-2.6384244,-2.3490844,-2.3490844,-0.853631,-0.853631,-0.074347496,-0.074347496,-0.30829525,-0.30829525,0.43954086,0.43954086,0.54873943,0.54873943,0.8183832,0.8183832,1.0014038,1.0014038,2.455223,2.455223,3.349473,3.349473,2.0034246,2.0034246,1.4390354,1.4390354,2.580967,2.580967,1.2319174,1.2319174,-0.41242695,-0.41242695,0.13224697,0.13224697,1.8987179,1.8987179,0.9012003,0.9012003,-0.70207596,-0.70207596,-2.0321999,-2.0321999,-3.229127,-3.229127,-4.0672245,-4.0672245,-4.1801157,-4.1801157,-3.817122,-3.817122,-2.6399508,-2.6399508,1.4437084,1.4437084,1.3956137,1.3956137,0.50617695,0.50617695,0.40380764,0.40380764,0.9774647,0.9774647,1.5425959,1.5425959,1.5629416,1.5629416,2.1612167,2.1612167,3.6896496,3.6896496,4.2851963,4.2851963,1.5252981,1.5252981,-0.6276369,-0.6276369,-0.36693192,-0.36693192,1.1648655,1.1648655,2.2156734,2.2156734,2.0633612,2.0633612,0.3493786,0.3493786,-1.7587299,-1.7587299,-3.4316993,-3.4316993,-3.5680218,-3.5680218,-3.3485656,-3.3485656,-2.703764,-2.703764,-1.873107,-1.873107,-0.8897877,-0.8897877,-0.41870308,-0.41870308,-0.29381084,-0.29381084,-0.5161419,-0.5161419,0.15893364,0.15893364,0.9726324,0.9726324,1.9092159,1.9092159,2.1520262,2.1520262,1.9801035,1.9801035,1.99541,1.99541,2.1240416,2.1240416,3.1127014,3.1127014,4.273732,4.273732,2.4204636,2.4204636,0.82465935,0.82465935,0.8626814,0.8626814,0.6838865,0.6838865,-0.7868538,-0.7868538,-1.4180441,-1.4180441,-1.5712061,-1.5712061,-3.2499485,-3.2499485,-4.7127767,-4.7127767,-5.1628284,-5.1628284,-3.7519126,-3.7519126,-2.3266625,-2.3266625,-0.8081255,-0.8081255,0.25490475,0.25490475,0.1971817,0.1971817,0.12612629,0.12612629,0.46963024,0.46963024,0.6128683,0.6128683,1.2663984,1.2663984,2.5914612,2.5914612,3.5704937,3.5704937,2.4170218,2.4170218,2.6547537,2.6547537,4.3904,4.3904,3.0794725,3.0794725,-0.54389954,-0.54389954,-3.176302,-3.176302,-1.9545107,-1.9545107,1.0419092,1.0419092,4.4636135,4.4636135,3.5024586,3.5024586,0.7064676,0.7064676,-2.1104417,-2.1104417,-4.747613,-4.747613,-5.1128654,-5.1128654,-4.6066546,-4.6066546,-3.7101488,-3.7101488,-2.6987333,-2.6987333,-1.8891773,-1.8891773,-0.7044897,-0.7044897,0.517992,0.517992,1.4404163,1.4404163,1.5416698,1.5416698,0.81905746,0.81905746,1.0222759,1.0222759,1.828702,1.828702,3.2292423,3.2292423,3.5327854,3.5327854,2.2693195,2.2693195,2.7884216,2.7884216,4.127103,4.127103,-0.0021734238,-0.0021734238,-1.0623131,-1.0623131,1.0416183,1.0416183,1.3865919,1.3865919,-0.46071148,-0.46071148,-1.7572317,-1.7572317,-2.4815636,-2.4815636,-3.754696,-3.754696,-4.4372067,-4.4372067,-3.7242465,-3.7242465,-2.6824932,-2.6824932,-1.4430895,-1.4430895,-0.5157385,2.1546354,2.1546354,2.3951216,2.3951216,2.2837763,2.2837763,3.49154,3.49154,6.0286636,6.0286636,3.2807217,3.2807217,-0.89869595,-0.89869595,-2.9092283,-2.9092283,-0.8831043,-0.8831043,1.0274391,1.0274391,1.6320724,1.6320724,0.4173193,0.4173193,-1.0688381,-1.0688381,-2.533978,-2.533978,-3.561605,-3.561605,-4.099773,-4.099773,-3.111629,-3.111629,-1.9826021,-1.9826021,-1.0074253,-1.0074253,-0.1053772,-0.1053772,0.012590408,0.012590408,0.80865383,0.80865383,1.5738688,1.5738688,1.8816347,1.8816347,2.6775103,2.6775103,3.1080246,3.1080246,3.0206747,3.0206747,2.7261353,2.7261353,3.536066,3.536066,3.703658,3.703658,2.1761618,2.1761618,-0.4072981,-0.4072981,-1.1449995,-1.1449995,0.5870218,0.5870218,1.6769094,1.6769094,0.04418564,0.04418564,-1.5137653,-1.5137653,-3.1644049,-3.1644049,-4.348737,-4.348737,-4.633524,-4.633524,-4.1525955,-4.1525955,-3.079111,-3.079111,-1.1625252,-1.1625252,0.4110632,0.4110632,0.12696934,0.12696934,-0.21235561,-0.21235561,0.6643362,0.6643362,1.3012295,1.3012295,0.5035038,0.5035038,0.2938919,0.2938919,-1.9641423,-1.9641423,-2.76505,-2.76505,-3.3752122,-3.3752122,-3.2320533,-3.2320533,-2.7458944,-2.7458944,-2.9335508,-2.9335508,-2.2814898,-2.2814898,-1.5265903,-1.5265903,-0.44201565,-0.44201565,-0.19371796,-0.19371796,0.28541565,0.28541565,1.1765947,1.1765947,1.6902351,1.6902351,1.8988428,1.8988428,2.5476856,2.5476856,2.9314528,2.9314528,2.0538998,2.0538998,1.8510389,1.8510389,2.9227057,2.9227057,3.357174,3.357174,1.1411552,1.1411552,-0.15664864,-0.15664864,-0.26186466,-0.26186466,0.9161005,0.9161005,0.46413898,0.46413898,-0.7185936,-0.7185936,-2.868703,-2.868703,-4.538372,-4.538372,-4.4201264,-4.4201264,-3.4626822,-3.4626822,-2.5782952,-2.5782952,-1.7841578,-1.7841578,-0.9167843,-0.9167843,-0.15951824,-0.15951824,0.41604137,0.41604137,0.46964073,0.46964073,0.33552456,0.33552456,0.8604746,0.8604746,2.0605164,2.0605164,2.6235762,2.6235762,2.7035303,2.7035303,1.172987,1.172987,2.413642,2.413642,4.8155766,4.8155766,3.9683142,3.9683142,-0.27778244,-0.27778244,-2.3841743,-2.3841743,-0.018393517,-0.018393517,2.0728092,2.0728092,2.3206367,2.3206367,0.77013016,0.77013016,-0.8344002,-0.8344002,-2.773106,-2.773106,-3.9844093,-3.9844093,-4.076859,-4.076859,-3.5532355,-3.5532355,-2.8815317,-2.8815317,-1.1066275,-1.1066275,-0.80364037,-0.80364037,-0.47503376,-0.47503376,0.16654396,0.16654396,0.87414646,0.87414646,1.2556324,1.2556324,1.9764395,1.9764395,2.4581013,2.4581013,2.3690863,2.3690863,2.4363585,2.4363585,2.702242,2.702242,3.5821676,3.5821676,4.5140886,4.5140886,1.3297606,1.3297606,-0.49510288,-0.49510288,-0.32299805,-0.32299805,0.8984022,0.8984022,0.21596527,0.21596527,-1.3858118,-1.3858118,-1.7705669,-1.7705669,-2.9722042,-2.9722042,-4.18948,-4.18948,-4.8294888,-4.8294888,-4.104837,-4.104837,-2.4996,-2.4996,-0.6351471,-0.6351471,0.2623396,0.2623396,-0.029324532,-0.029324532,0.17194939,0.17194939,0.5344105,0.5344105,0.9328871,0.9328871,1.2816105,1.2816105,1.314168,1.314168,1.5752316,1.5752316,2.2951832,2.2951832,3.0572357,3.0572357,4.0018816,4.0018816,2.7289925,2.7289925,-0.08008957,-0.08008957,-0.9555731,-0.9555731,0.639822,0.639822,1.5670605,1.5670605,1.6432781,1.6432781,0.021191597,0.021191597,-1.7236624,-1.7236624,-3.3774834,-3.3774834,-4.178546,-4.178546,-3.9853792,-3.9853792,-2.7982874,-2.7982874,-2.336287,-2.336287,-1.5439558,-1.5439558,-0.79438686,-0.79438686,-0.51310444,-0.51310444,-0.55848885,-0.55848885,-0.11597633,-0.11597633,1.1414194,1.1414194,2.0555058,2.0555058,2.076191,2.076191,1.9479971,1.9479971,1.8976116,1.8976116,1.6736708,1.6736708,2.4660568,2.4660568,3.399928,3.399928,3.0908422,3.0908422,0.6212654,0.6212654,-0.24183846,-0.24183846,1.0160732,1.0160732,0.71410656,0.71410656,-1.3443213,-1.3443213,-2.260522,-2.260522,-3.887617,-3.887617,-4.612166,-4.612166,-3.9225807,-3.9225807,-2.6954079,-2.6954079,-1.9403868,-1.9403868,-1.0580521,-1.0580521,-0.6965351,-0.6965351,-0.6493454,-0.6493454,0.012103081,0.012103081,1.0710983,1.0710983,1.5124769,1.5124769,1.4826717,1.4826717,1.9698658,1.9698658,3.0139008,3.0139008,2.7223864,2.7223864,1.9728079,1.9728079,3.708499,3.708499,4.413514,4.413514,1.1543751,1.1543751,-1.4761782,-1.4761782,-1.3758173,-1.3758173,0.8077698,0.8077698,2.2313528,2.2313528,1.6192131,1.6192131,0.20226002,0.20226002,-1.2822695,-1.2822695,-2.9395447,-2.9395447,-3.651186,-3.651186,-3.5044985,-3.5044985,-3.2566876,-3.2566876,-3.2018166,-3.2018166,-1.2390776,-1.2390776,-1.2608271,-1.2608271,-0.6493683,-0.6493683,0.07686138,0.07686138,0.99258804,0.99258804,1.2898264,1.2898264,1.4983072,1.4983072,2.0867949,2.0867949,2.5408812,2.5408812,2.2136974,2.2136974,2.4333305,2.4333305,4.191125,4.191125,4.2838583,4.2838583,1.6143255,1.6143255,0.58910084,0.58910084,0.27022743,0.27022743,-0.42242813,-0.42242813,-0.6977606,-0.6977606,-0.61663055,-0.61663055,-1.8013468,-1.8013468,-3.3491445,-3.3491445,-4.297699,-4.297699,-4.2050433,-4.2050433,-3.1696377,-3.1696377,-2.0946798,-2.0946798,-1.0100718,-1.0100718,-0.48691368,-0.48691368,-0.6773205,-0.6773205,-0.17710018,-0.17710018,0.9870949,0.9870949,1.5124836,1.5124836,1.3042555,1.3042555,1.7879295,1.7879295,2.325677,2.325677,2.2211246,2.2211246,3.7161045};
	private float[] rece={1f,2f,3f,4f,5f,6f};
	private float[] user1 = {1f,2f,3f};
	public void setUp(){
		
		Log.i("test", "ddddddddddddddddddd");
	}

	public void testgetOneSetpInfo(){
		Filter filter = new Filter();
	/*	Log.i("UnitTest------", "unitTest");
		filter.getOneSetpInfo(samples);*/
	}
	
	public void testgetOneSets(){
		List<float[][]> sample = MathCal.getSetps(samples2);
		assertEquals(3,sample.size());
	}
	public void testcycleAnalys(){
		Filter filter = new Filter();
		filter.cycleAnalys(samplesCycle);
		
		
	}
	
	public void testgetStrideLength(){
//		assertEquals(4.0f,	MathCal.getStrideLength(sampleCyclesforStride));
		
	}
	
	// smoth variance is 0.046
	// move variance is 5.134
	public void testgetVariance(){
	/*	float[]newSamples = new float[sampleMove.length];
		for(int i =0;i<newSamples.length;i++){
			newSamples[i] =(float) sampleMove[i];
		}
		float variance = Filter.getVariance(newSamples);
		Log.i("variance", variance+"");*/
		float variance = Filter.getVariance(sample3);
		assertEquals(0.5f,variance);
		
	}
	public void testCycleAnalys(){
		TrackingOrientation ori =  Filter.cycleAnalys(cycleAnalysample);
		assertTrue(TrackingOrientation.STATE.FORWARD==ori.getState());
		//assertEquals(Math.atan(1.3d/1.5),ori.getAngle());
		Log.i("test", "test");
		
	}
	@Override
	protected void tearDown() throws Exception {
		// TODO Auto-generated method stub
		super.tearDown();
	}
	
	public void testHandleSample(){
	/*	Filter.handleSample(Sumsamples);
		System.out.println(Arrays.toString(Sumsamples));*/
		
	}
	
	public void testSmoothNewSample(){
		Filter.smoothNewSample(smoothSamples, 5);
		Log.i("finish", "finish");
		
	}
	public void testSmoothSamples(){
		Filter.smoothSample(Sumsamples, 101);
		
		Log.i("smooth", "smooth");
		
	}
	
	public void testEndPeroidPosition(){
		 int position = Filter.endPeroidPosition(smoothSamples, 5/2);
		 assertEquals(position,8);
	}
	
	public void testgetOrientattion(){
		TrackingOrientation track = new TrackingOrientation();
		Filter.getOrientattion(track,
				2f,-2f,1,3,
				1f,-1f,2,0,
				0.5f,-0.5f,2,0,testOrientation);
		assertEquals(track.getState(),TrackingOrientation.STATE.BACKWARD);
//		assertEquals(Math.tan((track.getAngle())),0.5f);
		
	}
	public void testgetOrientattion2(){
		TrackingOrientation track = new TrackingOrientation();
		Filter.getOrientattion(track,
				1f,-1f,1,3,
				0.25f,-0.25f,1,3,
				0.5f,-0.5f,1,3,testOrientation2);
	/*	assertEquals(track.getState(),TrackingOrientation.STATE.FORWARD);
		assertEquals(Math.tan((track.getAngle())),2f);*/
		
	}
	
	public void testwalkingAnalys(){
//		Filter.walkingAnalys(testOrientation2);
	}
	public void testHDFilter(){
		float[][] data2 = Filter.hDFilterVertical(hd,data);;
		//Log.i("data", Arrays.toString(data2));
		
		
	}
	public void testHDFilter1(){
		float[] data4 = new float[data3.length];
		for(int i =0;i<data3.length;i++){
			data4[i]= (float)data3[i];
		}
//		float[]data2 = Filter.hDFilter2(HDClass.HD1to3,data4);;
		StringBuffer s = new StringBuffer();
//		s.append(Arrays.toString(data2));
//		Filter.write2SDcard("afterFilter",s);
		
		
	}
	public void testCorrelation(){
//		Filter.correlation(rece, user1, 6, 3);
//		Assert.assertEquals(rece[0], 1f);
//		Assert.assertEquals(rece[1], 1f);
//		Assert.assertEquals(rece[2], 1f);		
//		Assert.assertEquals(rece[3], 1f);
		
	}
	
	public void testMultiplyFrequency(){
//		float[] receive ={1f,2f,3f,4f,5f};
//		int sampleRate = 5;
//		int freofTone = 2;
//		Filter.multiplyFrequency(receive, sampleRate, freofTone);
//		Assert.assertEquals(receive[0], 1f);
	}
	
}
